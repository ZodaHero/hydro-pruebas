export declare type Result<T, TError> = Ok<T, TError> | Err<T, TError>;
export declare const ok: <T, TError = never>(value: T) => Ok<T, TError>;
export declare const err: <T = never, TError = unknown>(err: TError) => Err<T, TError>;
export declare class Ok<T, TError> {
    readonly value: T;
    constructor(value: T);
    isErr(): this is Err<T, TError>;
    valueOrThrow(): T;
    mapError<TMappedError>(mapper: (error: TError) => TMappedError): Result<T, TError>;
}
export declare class Err<T, TError> {
    readonly error: TError;
    constructor(error: TError);
    isErr(): this is Err<T, TError>;
    valueOrThrow(): T;
    mapError<TMappedError>(mapper: (error: TError) => TMappedError): Result<T, TMappedError>;
}
